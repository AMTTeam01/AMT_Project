package ch.heigvd.amt.mvcProject.domain.user;

import ch.heigvd.amt.mvcProject.domain.IEntity;
import lombok.*;

@Data
@Builder(toBuilder = true)
public class User implements IEntity<User, UserId> {

    private UserId id;
    private String username;
    private String email;

    @EqualsAndHashCode.Exclude
    private String encryptedPassword;

    @Override
    public User deepClone() {
        return this.toBuilder()
                .id(new UserId(id.asString()))
                .build();
    }

    /**
     * @param clearTxtPassword
     * @return true if the clear password correspond to the encrypted password
     */
    public boolean authenticate(String clearTxtPassword){
        return clearTxtPassword.toUpperCase().equals(encryptedPassword);
    }

    /**
     * Override the builder generated by Lambok
     */
    public static class UserBuilder {

        public UserBuilder clearTextPassword(String clearTxtPassword){
            if(clearTxtPassword == null || clearTxtPassword.isEmpty()){
                throw new IllegalArgumentException("Password is mandatory");
            }

            // TODO : A changer pour une librairie de chiffrage de mot de passe

            encryptedPassword = clearTxtPassword.toUpperCase();

            return this;
        }

        public User build() {
            if (id == null) {
                id = new UserId();
            }

            if (email == null || email.isEmpty()) {
                throw new IllegalArgumentException("Email is mandatory");
            }

            if(username == null || username.isEmpty()){
                throw new IllegalArgumentException("Username is mandatory");
            }

            if(encryptedPassword == null || encryptedPassword.isEmpty()){
                throw new IllegalArgumentException("Password is mandatory");
            }

            return new User(id, username, email, encryptedPassword);
        }
    }

}
