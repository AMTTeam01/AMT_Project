# This is a basic workflow to help you get started with Actions

name: Tests the application Help 2000

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  pull_request:
    branches:
      - '*'
      - '!master'


jobs:
  junit:
    runs-on: ubuntu-latest
    name: Unit test
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Setup JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      # Cache optimization
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run tests with Maven
        run: mvn -B test --file pom.xml
  e2e:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    name: test e2e
    # Fix node js version
    strategy:
      matrix:
        node-version: [ 12.x ]
    needs: junit
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Setup JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      # Cache optimization
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: User Node.js ${{matrix.node-version}}
        uses: actions/setup-node@v1
        with:
          node-version: ${{matrix.node-version}}

      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-

      - name: Install dependencies
        run: |
          cd e2e
          npm ci

      # Codeceptjs
      - name: Run End2End Tests
        run: ./run-e2e-tests.sh

      - name: Save output
        uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: e2e screenshoots
          path: e2e/output/*
          retention-days: 5

  # Run integration test with arquillian
  arquillian:
    runs-on: ubuntu-latest
    name: Integration test
    needs: junit
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Setup JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      # Cache optimization
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - uses: actions/checkout@v2
      - name: Run IT
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.local.yml build db
          docker-compose -f docker-compose.yml -f docker-compose.local.yml up -d db
          cp src/test/resources/arquillian_example.xml src/test/resources/arquillian.xml
          ./run-integration-tests.sh
          mvn liberty:stop



## A workflow run is made up of one or more jobs that can run sequentially or in parallel
#jobs:
#  # This workflow contains a single job called "build"
#  build:
#    # The type of runner that the job will run on
#    runs-on: ubuntu-latest
#
#    # Fix node js version
#    strategy:
#      matrix:
#        node-version: [ 12.x ]
#
#    # Steps represent a sequence of tasks that will be executed as part of the job
#    steps:
#      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#      - uses: actions/checkout@v2
#
#      # Setup environment with Java
#      - name: Setup JDK 11
#        uses: actions/setup-java@v1
#        with:
#          java-version: 11
#
#      # Cache optimization
#      - uses: actions/cache@v1
#        with:
#          path: ~/.m2/repository
#          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#          restore-keys: |
#            ${{ runner.os }}-maven-
#
#      # Codeceptjs
#      - uses: actions/checkout@v2
#      - name: Run End2End Tests
#        uses: actions/setup-node@v1
#        with:
#          node-version: ${{matrix.node-version}}
#      - run: ./run-e2e-tests.sh
#        #          npm install puppeteer --prefix e2e
#        #          npx codeceptjs run -c e2e
#        env:
#          CI: true
#
#      # Run integration test with arquillian
#      - uses: actions/checkout@v2
#      - name: Run IT
#        run: |
#          ./run-app.sh
#          cp src/test/resources/arquillian_example.xml src/test/resources/arquillian.xml
#          ./run-integration-tests.sh
#          mvn liberty:stop
#
#      # Maven package
#      - name: Build with Maven
#        run: mvn clean package
#
#      # Docker build (with PAT)
#      - name: Build Docker image (with mvn clean package)
#        run: |
#          echo ${{ secrets.HELP2000_PAT }} | docker login ghcr.io -u dev-help2000 --password-stdin
#          docker build -t amt-project/help2000 .
#          docker tag amt-project/help2000 ghcr.io/amtteamheig/amt_project
#          docker push ghcr.io/amtteamheig/amt_project
